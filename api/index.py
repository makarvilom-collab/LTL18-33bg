from flask import Flask, render_template_string
import os

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Vercel
app = Flask(__name__)

@app.route('/')
def index():
    html_template = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>LTL18:33BG - BEATSSUDA Platform</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .container {
                background: white;
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                text-align: center;
                max-width: 500px;
                width: 100%;
            }
            .logo {
                font-size: 2.5em;
                font-weight: bold;
                color: #667eea;
                margin-bottom: 20px;
            }
            .subtitle {
                color: #666;
                margin-bottom: 30px;
                font-size: 1.1em;
            }
            .features {
                text-align: left;
                margin: 30px 0;
            }
            .feature {
                margin: 10px 0;
                padding: 10px;
                background: #f8f9fa;
                border-radius: 10px;
                border-left: 4px solid #667eea;
            }
            .btn {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                padding: 15px 30px;
                border-radius: 25px;
                font-size: 1.1em;
                cursor: pointer;
                text-decoration: none;
                display: inline-block;
                margin-top: 20px;
                transition: transform 0.2s;
            }
            .btn:hover {
                transform: translateY(-2px);
            }
            .status {
                background: #d4edda;
                color: #155724;
                padding: 10px;
                border-radius: 10px;
                margin-top: 20px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="logo">üéµ BEATSSUDA</div>
            <div class="subtitle">LTL18:33BG - Platform –¥–ª—è –±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤</div>
            
            <div class="features">
                <div class="feature">üé§ –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –±–∏—Ç—ã</div>
                <div class="feature">üéõÔ∏è –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥ –∏ —Å–≤–µ–¥–µ–Ω–∏–µ</div>
                <div class="feature">üí¨ –î–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º —Å –∫–æ–º—å—é–Ω–∏—Ç–∏</div>
                <div class="feature">üéπ –ù–∞—Ö–æ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∫–∏—Ç—ã –∏ –ø—Ä–µ—Å–µ—Ç—ã</div>
            </div>
            
            <div class="status">
                ‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞ Vercel!
            </div>
            
            <a href="/webhook/test" class="btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API</a>
        </div>
    </body>
    </html>
    """
    return render_template_string(html_template)

@app.route('/health')
def health():
    return {
        "status": "ok",
        "message": "BEATSSUDA Platform is running!",
        "version": "1.0.0"
    }

# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞
@app.route('/webhook/<token>', methods=['POST', 'GET'])  
def webhook(token):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    BOT_TOKEN = "8405053839:AAENp9xuJw2HVwF1FWs8Dipwkrur1dqK2Uw"
    
    if token != BOT_TOKEN and token != "test":
        return {"error": "Unauthorized"}, 403
    
    if token == "test":
        return {
            "status": "ok",
            "message": "Webhook endpoint is working!",
            "bot_token_valid": len(BOT_TOKEN) > 0
        }
    
    try:
        from flask import request
        import requests
        
        if request.method == 'GET':
            return {"status": "webhook_ready", "method": "GET"}
        
        update = request.get_json()
        
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            if text == '/start':
                send_start_message(chat_id)
            elif text == '/app':
                send_app_message(chat_id)
            elif text == '/help':
                send_help_message(chat_id)
        
        return {"status": "ok"}, 200
        
    except Exception as e:
        return {"error": str(e)}, 500

def send_start_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    import requests
    
    BOT_TOKEN = "8405053839:AAENp9xuJw2HVwF1FWs8Dipwkrur1dqK2Uw"
    message = """üéµ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LTL18:33BG \\- BEATSSUDA Platform*

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º\\! –ú—ã \\- –∫–æ–º—å—é–Ω–∏—Ç–∏ –±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤ –∏ –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤\\.
–ü–æ–º–æ–≥–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥—É, –¥–µ–ª–∞–µ–º –∑–≤—É–∫,
–ø—Ä–æ–¥–∞—ë–º / –ø–æ–∫—É–ø–∞–µ–º / –¥–µ–ª–∏–º—Å—è –∫–∏—Ç–∞–º–∏ –∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏\\.

üî• *–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:*
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏—Ç—ã
‚Ä¢ –ó–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∏–Ω–≥ –∏ —Å–≤–µ–¥–µ–Ω–∏–µ  
‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –∫–æ–º—å—é–Ω–∏—Ç–∏
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –∫–∏—Ç—ã –∏ –ø—Ä–µ—Å–µ—Ç—ã

*–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:* @BeatHavenX

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:"""
    
    keyboard = {
        "inline_keyboard": [[
            {
                "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å BEATSSUDA Platform",
                "web_app": {"url": "https://bot-5xnok2krw-kanufuewfs-projects.vercel.app"}
            }
        ]]
    }
    
    send_telegram_message(chat_id, message, keyboard)

def send_app_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    message = "üöÄ *–û—Ç–∫—Ä–æ–π—Ç–µ BEATSSUDA Platform*"
    
    keyboard = {
        "inline_keyboard": [[
            {
                "text": "üì± –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É", 
                "web_app": {"url": "https://bot-5xnok2krw-kanufuewfs-projects.vercel.app"}
            }
        ]]
    }
    
    send_telegram_message(chat_id, message, keyboard)

def send_help_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    message = """‚ùì *–ü–æ–º–æ—â—å –ø–æ BEATSSUDA Platform*

*–ö–æ–º–∞–Ω–¥—ã:*
/start \\- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/app \\- –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É  
/help \\- –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1\\. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /app
2\\. –û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ Telegram
3\\. –ü–æ–∫—É–ø–∞–π—Ç–µ, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ, –æ–±—â–∞–π—Ç–µ—Å—å\\!

*–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è:* @BeatHavenX
*–í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–∏—Å–∞—Ç—å –µ–º—É\\!*"""
    
    send_telegram_message(chat_id, message)

def send_telegram_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    import requests
    
    BOT_TOKEN = "8405053839:AAENp9xuJw2HVwF1FWs8Dipwkrur1dqK2Uw"
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "MarkdownV2"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=data)
        return response.status_code == 200
    except Exception as e:
        print(f"Error sending message: {e}")
        return False

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
if __name__ == "__main__":
    app.run(debug=True)