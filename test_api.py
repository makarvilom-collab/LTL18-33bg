#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è API BEATSSUDA Platform
"""

import requests
import json

BASE_URL = "http://127.0.0.1:5001"

def test_get_listings():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    response = requests.get(f"{BASE_URL}/api/v1/listings")
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(data.get('data', []))}")
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    print()

def test_search_listings():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    response = requests.get(f"{BASE_URL}/api/v1/listings/search", params={"q": "trap"})
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(data.get('data', []))}")
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    print()

def test_get_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    response = requests.get(f"{BASE_URL}/api/v1/stats")
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {data.get('data', {})}")
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    print()

def test_create_listing():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    
    listing_data = {
        "listing_type": "sell",
        "author": "@test_user",
        "contact": "@test_user",
        "item_type": "–±–∏—Ç",
        "genre": "trap",
        "preview_url": "https://soundcloud.com/test/track",
        "price": "50 USD",
        "license": "non-exclusive",
        "includes": "wav, stems",
        "delivery_time": "24 —á–∞—Å–∞",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–ø –±–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API",
        "tags": "#–±–∏—Ç #–ø—Ä–æ–¥–∞–º #trap #test"
    }
    
    # –ò–º–∏—Ç–∞—Ü–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    headers = {
        "Content-Type": "application/json",
        "X-Telegram-User": json.dumps({
            "id": 12345,
            "username": "test_user",
            "first_name": "Test",
            "last_name": "User"
        })
    }
    
    response = requests.post(f"{BASE_URL}/api/v1/listings", 
                           json=listing_data, 
                           headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 201:
        data = response.json()
        listing_id = data.get('data', {}).get('id')
        print(f"–°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID: {listing_id}")
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        return listing_id
    else:
        print(f"–û—à–∏–±–∫–∞: {response.text}")
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        return None
    print()

def test_get_single_listing(listing_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not listing_id:
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –Ω–µ—Ç ID")
        return
        
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing_id}...")
    response = requests.get(f"{BASE_URL}/api/v1/listings/{listing_id}")
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {data.get('data', {}).get('item_type')} - {data.get('data', {}).get('price')}")
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    print()

def test_get_formatted_listing(listing_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not listing_id:
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–µ—Ç ID")
        return
        
    print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing_id}...")
    response = requests.get(f"{BASE_URL}/api/v1/listings/{listing_id}/formatted")
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        formatted_text = data.get('data', {}).get('formatted_text', '')
        print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):\n{formatted_text[:100]}...")
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    print()

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API BEATSSUDA Platform\n")
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    test_get_listings()
    test_search_listings()
    test_get_stats()
    
    # –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è
    listing_id = test_create_listing()
    test_get_single_listing(listing_id)
    test_get_formatted_listing(listing_id)
    
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    try:
        main()
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:5001")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")