#!/usr/bin/env python3
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from app.models.listing import db, init_db, Listing
    from app.forms import ListingForm, SearchForm
    from app.moderation import content_moderator
    from app.api.routes import api_bp
    from app.telegram_auth import validate_telegram_user_header
    
    # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Flask(__name__, 
                template_folder='app/templates',
                static_folder='app/static')
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'beatssuda-secret-key-change-in-production')
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data')
    os.makedirs(data_dir, exist_ok=True)
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_path = os.path.join(data_dir, 'beatssuda.db')
    app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{database_path}'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db(app)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API Blueprint
    app.register_blueprint(api_bp, url_prefix='/api')
    
    @app.route('/')
    def index():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            all_listings = Listing.query.order_by(Listing.created_at.desc()).all()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            recent_listings = all_listings[:6]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'total': len(all_listings),
                'today': len([l for l in all_listings if l.created_at.date() == datetime.now().date()])
            }
            
            return render_template('index.html', 
                                 listings=all_listings,
                                 recent_listings=recent_listings,
                                 stats=stats)
        except Exception as e:
            # Fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            return render_template('index.html', 
                                 listings=[],
                                 recent_listings=[],
                                 stats={'total': 0, 'today': 0})

    @app.route('/create', methods=['GET', 'POST'])
    def create_listing():
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        form = ListingForm()
        
        if form.validate_on_submit():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
            telegram_user = validate_telegram_user_header(request.headers)
            if not telegram_user:
                flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram', 'error')
                return redirect(url_for('create_listing'))
            
            # –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            title_check = content_moderator.check_text(form.title.data)
            description_check = content_moderator.check_text(form.description.data)
            
            if not title_check['is_appropriate'] or not description_check['is_appropriate']:
                flash('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é', 'error')
                return render_template('create_listing.html', form=form)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            listing = Listing(
                title=form.title.data,
                description=form.description.data,
                price=form.price.data,
                category=form.category.data,
                contact_info=form.contact_info.data,
                user_id=telegram_user.get('id'),
                username=telegram_user.get('username', 'Anonymous')
            )
            
            try:
                db.session.add(listing)
                db.session.commit()
                flash('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', 'success')
                return redirect(url_for('index'))
            except Exception as e:
                db.session.rollback()
                flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', 'error')
        
        return render_template('create_listing.html', form=form)

    @app.route('/view/<int:listing_id>')
    def view_listing(listing_id):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        listing = Listing.query.get_or_404(listing_id)
        return render_template('view_listing.html', listing=listing)

    @app.route('/search')
    def search_listings():
        """–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        form = SearchForm()
        listings = []
        
        if request.args.get('query'):
            query = request.args.get('query')
            category = request.args.get('category', '')
            min_price = request.args.get('min_price', type=float)
            max_price = request.args.get('max_price', type=float)
            
            # –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
            search = Listing.query.filter(
                Listing.title.contains(query) | 
                Listing.description.contains(query)
            )
            
            # –§–∏–ª—å—Ç—Ä—ã
            if category:
                search = search.filter(Listing.category == category)
            if min_price is not None:
                search = search.filter(Listing.price >= min_price)
            if max_price is not None:
                search = search.filter(Listing.price <= max_price)
            
            listings = search.order_by(Listing.created_at.desc()).all()
        
        return render_template('search.html', form=form, listings=listings)

    @app.route('/stats')
    def show_stats():
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            total_listings = Listing.query.count()
            categories_stats = db.session.query(
                Listing.category, 
                db.func.count(Listing.id)
            ).group_by(Listing.category).all()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            from sqlalchemy import func, extract
            daily_stats = db.session.query(
                func.date(Listing.created_at),
                func.count(Listing.id)
            ).group_by(func.date(Listing.created_at)).order_by(func.date(Listing.created_at).desc()).limit(7).all()
            
            stats = {
                'total_listings': total_listings,
                'categories': dict(categories_stats),
                'daily_stats': daily_stats
            }
            
            return render_template('stats.html', stats=stats)
        except Exception as e:
            return render_template('stats.html', stats={'total_listings': 0, 'categories': {}, 'daily_stats': []})

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    @app.errorhandler(404)
    def not_found_error(error):
        return render_template('error.html',
                             title='–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                             message='–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'), 404

    @app.errorhandler(500)
    def server_error(error):
        app.logger.error(f"Server Error: {str(error)}")
        return render_template('error.html',
                             title='–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                             message='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'), 500

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    @app.context_processor
    def inject_globals():
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤"""
        return {
            'current_year': datetime.now().year,
            'site_name': 'LTL18:33bg - BEATSSUDA'
        }

    # –í–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞
    @app.route('/webhook/<token>', methods=['POST'])
    def webhook(token):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
        import requests
        
        BOT_TOKEN = "8405053839:AAENp9xuJw2HVwF1FWs8Dipwkrur1dqK2Uw"
        
        if token != BOT_TOKEN:
            return "Unauthorized", 403
        
        try:
            update = request.get_json()
            
            if 'message' in update:
                message = update['message']
                chat_id = message['chat']['id']
                text = message.get('text', '')
                
                if text == '/start':
                    send_telegram_start_message(chat_id)
                elif text == '/app':
                    send_telegram_app_message(chat_id)
                elif text == '/help':
                    send_telegram_help_message(chat_id)
            
            return "OK", 200
            
        except Exception as e:
            app.logger.error(f"Webhook error: {e}")
            return "Error", 500

    def send_telegram_start_message(chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        import requests
        
        BOT_TOKEN = "8405053839:AAENp9xuJw2HVwF1FWs8Dipwkrur1dqK2Uw"
        message = """üéµ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LTL18:33BG \- BEATSSUDA Platform*

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º\\! –ú—ã \- –∫–æ–º—å—é–Ω–∏—Ç–∏ –±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤ –∏ –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤\\.
–ü–æ–º–æ–≥–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥—É, –¥–µ–ª–∞–µ–º –∑–≤—É–∫,
–ø—Ä–æ–¥–∞—ë–º / –ø–æ–∫—É–ø–∞–µ–º / –¥–µ–ª–∏–º—Å—è –∫–∏—Ç–∞–º–∏ –∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏\\.

üî• *–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:*
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏—Ç—ã
‚Ä¢ –ó–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∏–Ω–≥ –∏ —Å–≤–µ–¥–µ–Ω–∏–µ  
‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –∫–æ–º—å—é–Ω–∏—Ç–∏
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –∫–∏—Ç—ã –∏ –ø—Ä–µ—Å–µ—Ç—ã

*–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:* @BeatHavenX

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:"""
        
        keyboard = {
            "inline_keyboard": [[
                {
                    "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å BEATSSUDA Platform",
                    "web_app": {"url": "https://ltl-18-33bg.vercel.app"}
                }
            ]]
        }
        
        send_telegram_message_helper(chat_id, message, keyboard)

    def send_telegram_app_message(chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        message = "üöÄ *–û—Ç–∫—Ä–æ–π—Ç–µ BEATSSUDA Platform*"
        
        keyboard = {
            "inline_keyboard": [[
                {
                    "text": "üì± –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É",
                    "web_app": {"url": "https://ltl-18-33bg.vercel.app"}
                }
            ]]
        }
        
        send_telegram_message_helper(chat_id, message, keyboard)

    def send_telegram_help_message(chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message = """‚ùì *–ü–æ–º–æ—â—å –ø–æ BEATSSUDA Platform*

*–ö–æ–º–∞–Ω–¥—ã:*
/start \- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/app \- –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
/help \- –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1\\. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /app
2\\. –û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ Telegram
3\\. –ü–æ–∫—É–ø–∞–π—Ç–µ, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ, –æ–±—â–∞–π—Ç–µ—Å—å\\!

*–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è:* @BeatHavenX
*–í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–∏—Å–∞—Ç—å –µ–º—É\\!*"""
        
        send_telegram_message_helper(chat_id, message)

    def send_telegram_message_helper(chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
        import requests
        
        BOT_TOKEN = "8405053839:AAENp9xuJw2HVwF1FWs8Dipwkrur1dqK2Uw"
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "MarkdownV2"
        }
        
        if reply_markup:
            data["reply_markup"] = reply_markup
        
        try:
            response = requests.post(url, json=data)
            return response.status_code == 200
        except Exception as e:
            print(f"Error sending message: {e}")
            return False

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    with app.app_context():
        db.create_all()

except ImportError as e:
    print(f"Import error: {e}")
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        return '''
        <html>
        <head><title>BEATSSUDA Platform</title></head>
        <body>
            <h1>üéµ LTL18:33BG - BEATSSUDA Platform</h1>
            <p>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∫—É–ø–∫–∏ –±–∏—Ç–æ–≤</p>
            <p>Status: Import error - contact @BeatHavenX</p>
        </body>
        </html>
        '''

@app.route('/health')
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return jsonify({"status": "ok", "platform": "BEATSSUDA"})

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5001))
    app.run(debug=True, host='0.0.0.0', port=port)