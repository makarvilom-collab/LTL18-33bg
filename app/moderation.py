import re
import validators
from urllib.parse import urlparse
from app.models.listing import ContentFilter, ModerationLog, db

class ContentModerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.banned_domains = [
            'torrent', 'pirate', 'crack', 'keygen', 'warez',
            'rutracker', 'thepiratebay', 'kickass'
        ]
        
        self.suspicious_patterns = [
            r'\b(–±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å–∫–∞—á–∞—Ç—å|–¥–∞—Ä–æ–º|free download)\b',
            r'\b(–∫—Ä—è–∫|crack|keygen|—Å–µ—Ä–∏–π–Ω–∏–∫)\b',
            r'\b(–ø–∏—Ä–∞—Ç–∫–∞|–ø–∏—Ä–∞—Ç|–≤–∑–ª–æ–º)\b',
            r'\b(—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞|\+\d{10,})\b',
            r'\b(–∫–∞—Ä—Ç–∞|–±–∞–Ω–∫|—Å—á–µ—Ç|–ø–µ—Ä–µ–≤–æ–¥|paypal)\b'
        ]
        
        self.safe_domains = [
            'soundcloud.com',
            'drive.google.com',
            't.me',
            'dropbox.com',
            'mediafire.com',
            'wetransfer.com',
            'youtube.com',
            'youtu.be',
            'bandcamp.com',
            'spotify.com'
        ]
    
    def moderate_listing(self, listing_data):
        """
        –ú–æ–¥–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        
        Returns:
            dict: {
                'approved': bool,
                'warnings': list,
                'errors': list,
                'needs_review': bool
            }
        """
        result = {
            'approved': True,
            'warnings': [],
            'errors': [],
            'needs_review': False
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—å—é URL
        preview_check = self._check_preview_url(listing_data.get('preview_url', ''))
        if preview_check['error']:
            result['errors'].append(preview_check['message'])
            result['approved'] = False
        elif preview_check['warning']:
            result['warnings'].append(preview_check['message'])
            result['needs_review'] = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        text_fields = [
            listing_data.get('description', ''),
            listing_data.get('author', ''),
            listing_data.get('contact', ''),
            listing_data.get('tags', ''),
            listing_data.get('price', '')
        ]
        
        text_content = ' '.join(text_fields).lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.suspicious_patterns:
            if re.search(pattern, text_content, re.IGNORECASE):
                result['warnings'].append(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {pattern}')
                result['needs_review'] = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_filters = ContentFilter.query.filter_by(is_active=True).all()
        for filter_obj in db_filters:
            if filter_obj.is_regex:
                if re.search(filter_obj.pattern, text_content, re.IGNORECASE):
                    if filter_obj.filter_type == 'banned_word':
                        result['errors'].append(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ')
                        result['approved'] = False
                    else:
                        result['warnings'].append(f'–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ')
                        result['needs_review'] = True
            else:
                if filter_obj.pattern.lower() in text_content:
                    if filter_obj.filter_type == 'banned_domain':
                        result['errors'].append(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω')
                        result['approved'] = False
                    else:
                        result['warnings'].append(f'–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ')
                        result['needs_review'] = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        contact_check = self._check_contact_info(
            listing_data.get('contact', ''), 
            listing_data.get('description', '')
        )
        if contact_check['warnings']:
            result['warnings'].extend(contact_check['warnings'])
            result['needs_review'] = True
        
        return result
    
    def _check_preview_url(self, url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å URL –ø—Ä–µ–≤—å—é"""
        result = {'error': False, 'warning': False, 'message': ''}
        
        if not url:
            result['error'] = True
            result['message'] = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–≤—å—é'
            return result
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
        if not validators.url(url):
            result['error'] = True
            result['message'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–≤—å—é'
            return result
        
        try:
            parsed = urlparse(url.lower())
            domain = parsed.netloc
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            for banned in self.banned_domains:
                if banned in domain:
                    result['error'] = True
                    result['message'] = f'–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω: {domain}'
                    return result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω—ã–º
            is_safe = any(safe_domain in domain for safe_domain in self.safe_domains)
            
            if not is_safe:
                result['warning'] = True
                result['message'] = f'[–¢–†–ï–ë–£–ï–¢ –ü–†–û–í–ï–†–ö–ò] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º–µ–Ω: {domain}'
            
        except Exception as e:
            result['error'] = True
            result['message'] = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏'
        
        return result
    
    def _check_contact_info(self, contact, description):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
        result = {'warnings': []}
        
        text = f"{contact} {description}".lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        personal_data_patterns = [
            r'\b\d{10,}\b',  # –¢–µ–ª–µ—Ñ–æ–Ω—ã
            r'\b\d{4}\s*\d{4}\s*\d{4}\s*\d{4}\b',  # –ö–∞—Ä—Ç—ã
            r'\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b'  # Email
        ]
        
        for pattern in personal_data_patterns:
            if re.search(pattern, text):
                result['warnings'].append('–í–æ–∑–º–æ–∂–Ω–∞ —É—Ç–µ—á–∫–∞ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
                break
        
        return result
    
    def log_moderation(self, listing_id, action, reason, moderator='system'):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        log_entry = ModerationLog(
            listing_id=listing_id,
            action=action,
            reason=reason,
            moderator=moderator
        )
        db.session.add(log_entry)
        db.session.commit()
    
    def format_listing_beatssuda_style(self, listing_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ BEATSSUDA
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞
        type_emoji = {
            'sell': 'üî• SELL',
            'buy': 'üíé BUY', 
            'service': 'üõ† SERVICE'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –±–ª–æ–∫
        formatted = f"""
{type_emoji.get(listing_data['listing_type'], 'üì¶')} ‚Äî {listing_data['item_type']}
üßë –ê–≤—Ç–æ—Ä: {listing_data['author']}
üéµ –ñ–∞–Ω—Ä: {listing_data['genre']}"""
        
        if listing_data.get('license'):
            formatted += f"    üìå –õ–∏—Ü–µ–Ω–∑–∏—è: {listing_data['license']}"
        
        formatted += f"""
üîó –ü—Ä–µ–≤—å—é: {listing_data['preview_url']}
üí∏ –¶–µ–Ω–∞: {listing_data['price']}"""
        
        if listing_data.get('includes'):
            formatted += f"""
üì¶ –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ: {listing_data['includes']}"""
        
        if listing_data.get('delivery_time'):
            formatted += f"""
‚è± –°—Ä–æ–∫: {listing_data['delivery_time']}"""
        
        if listing_data.get('description'):
            formatted += f"""
‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {listing_data['description']}"""
        
        formatted += f"""
üì© –ö–æ–Ω—Ç–∞–∫—Ç: {listing_data['contact']}"""
        
        if listing_data.get('tags'):
            tags = [tag.strip() for tag in listing_data['tags'].split() if tag.strip()]
            if tags:
                formatted += f"""
üè∑ –¢–µ–≥–∏: {' '.join(tags)}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä
        formatted += """

‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è LTL18:33bg –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞—Å—á—ë—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ —ç—Å–∫—Ä–æ—É."""
        
        return formatted.strip()
    
    def get_moderation_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        from app.models.listing import Listing
        
        total_listings = Listing.query.count()
        approved_listings = Listing.query.filter_by(is_moderated=True, is_active=True).count()
        pending_listings = Listing.query.filter_by(is_moderated=False).count()
        
        return {
            'total': total_listings,
            'approved': approved_listings,
            'pending': pending_listings,
            'approval_rate': (approved_listings / total_listings * 100) if total_listings else 0
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
content_moderator = ContentModerator()